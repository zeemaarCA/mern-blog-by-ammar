payment.controller.js

import Stripe from 'stripe';
import mongoose from 'mongoose';
import Order from '../models/order.model.js';
import User from '../models/user.model.js';
import Payment from '../models/payment.model.js';
import dotenv from 'dotenv';
import logger from '../utils/logger.js';
import Cart from '../models/cart.model.js';
dotenv.config();
const stripe = new Stripe('sk_test_N9GrXRSMB1nazlDElS0f6QLC');
const endpointSecret = 'whsec_e1kCDRL8xyrpFAEjF6Lc6V8gR2JgWktQ';
mongoose.connect(process.env.MONGO, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
}).then(() => {
  console.log('Connected to MongoDB');
}).catch((err) => {
  logger.error('MongoDB connection error:', err);
});
export const createCheckoutSession = async (req, res) => {
  try {
    const { userId } = req.body;

    const cart = await Cart.findOne({ userId: new mongoose.Types.ObjectId(userId) });

    if (!cart || cart.items.length === 0) {
      throw new Error('Cart is empty');
    }
    // return;
    const lineItems = cart.items.map(item => ({
      price_data: {
        currency: 'usd',
        product_data: {
          name: item.title,
        },
        unit_amount: item.price * 100,
      },
      quantity: item.quantity,
    }));
    const session = await stripe.checkout.sessions.create({
      payment_method_types: ['card'],
      line_items: lineItems,
      mode: 'payment',
      success_url: 'https://mern-blog-erf7.onrender.com/payment-complete',
      cancel_url: 'https://mern-blog-erf7.onrender.com/payment-cancel',
      metadata: {
        userId,
      },
    });
    res.json({ id: session.id });
    return
  } catch (error) {
    logger.error('Error creating checkout session:', error);
    res.status(500).json({ error: error.message });
  }
};
export const handleWebhook = async (req, res) => {
  const sig = req.headers['stripe-signature'];
  let event;
  try {
    event = stripe.webhooks.constructEvent(req.body, sig, endpointSecret);
  } catch (err) {
    logger.error('Webhook error:', err.message);
    return res.status(400).send(`Webhook error: ${err.message}`);
  }
  try {
    switch (event.type) {
      case 'checkout.session.completed':
        const session = event.data.object;
        await handleCheckoutSessionCompleted(session);
        break;
      case 'charge.failed':
        const chargeFailed = event.data.object;
        await handleChargeFailed(chargeFailed);
        break;
      default:
        logger.warn(`Unhandled event type ${event.type}`);
    }
    res.json({ received: true });
  } catch (error) {
    logger.error('Error handling webhook event:', error);
    res.status(500).json({ error: error.message });
  }
};
async function handleCheckoutSessionCompleted(session) {
  try {
    const userId = session.metadata.userId;
    const cart = await Cart.findOne({ userId: new mongoose.Types.ObjectId(userId) });

    if (!cart || !cart.items || cart.items.length === 0) {
      throw new Error('User or cart information not found');
    }

    // Create Payment Record
    const payment = new Payment({
      userId: userId,
      name: session.customer_details.name,
      user: session.customer_details.email,
      sessionId: session.id,
      amount: session.amount_total,
      currency: session.currency,
      paymentMethod: session.payment_method_types[0], // Simplified assumption
      // receipt_url: session.receipt_url || '',
      status: session.payment_status,
      createdAt: new Date(session.created * 1000),
    });

    await payment.save();

    // Create Order Record
    const order = new Order({
      orderId: session.id,
      userId: userId,
      name: session.customer_details.name,
      user: session.customer_details.email,
      products: cart.items.map(p => ({ productId: p.id, title: p.title, quantity: p.quantity })),
      amount: session.amount_total,
      currency: session.currency,
      paymentStatus: session.payment_status,
      createdAt: new Date(session.created * 1000),
    });

    await order.save();
    logger.info('Payment and order saved successfully');

    // Clear Cart after successful payment
    await Cart.deleteOne({ userId: new mongoose.Types.ObjectId(userId) });

  } catch (error) {
    logger.error('Error saving payment or order:', error);
    throw new Error(`Error saving payment or order: ${error.message}`);
  }
}

async function handleChargeFailed(charge) {
  try {
    logger.warn(`Charge failed for user ${charge.metadata.userId}`);
  } catch (error) {
    logger.error('Error handling charge failure:', error);
    throw new Error(`Error handling charge failure: ${error.message}`);
  }
}


export const getPaymentDetails = async (req, res, next) => {
  try {
    // Extract the userId from the request parameters
    const { userId } = req.params;

    // Ensure userId is provided
    if (!userId) {
      return res.status(400).json({ error: 'User ID is required' });
    }

    // Find the payment details by userId
    const payment = await Payment.findOne({ userId });

    // If no payment details are found, return a 404 error
    if (!payment) {
      return res.status(404).json({ error: 'Payment details not found' });
    }

    // Return the payment details
    res.json(payment);
  } catch (error) {
    // Handle unexpected errors
    console.error('Error retrieving payment details:', error);
    res.status(500).json({ error: 'An error occurred while retrieving the payment details' });
  }
};



payment.route.js

import express from 'express'
// import { verifyToken } from '../utils/verifyUser.js';
import { createCheckoutSession, handleWebhook, getPaymentDetails } from '../controllers/payment.controller.js';


const router = express.Router();



router.post('/create-checkout-session', createCheckoutSession);
router.post('/webhook', handleWebhook);
router.get('/:userId', getPaymentDetails);



export default router


payment.jsx

import { Button } from "flowbite-react";
import { useEffect, useState } from "react";
import { useSelector } from "react-redux";
import { useNavigate } from "react-router-dom";

export default function Payment() {
  const navigate = useNavigate();
  const isCheckoutFormFilled = useSelector(
    (state) => state.checkout.isCheckoutFormFilled
  );
  const currentUser = useSelector((state) => state.user.currentUser); // Assuming you're storing the user ID in Redux auth state
  const [cartProducts, setCartProducts] = useState(null);

  const userId = currentUser ? currentUser._id : null;

  console.log(isCheckoutFormFilled);
  console.log(userId);

  useEffect(() => {
    const fetchCartProducts = async () => {
      if (userId) {
        try {
          const response = await fetch(`/api/cart/${userId}`);
          if (response.ok) {
            const data = await response.json();
            setCartProducts(data.cart.items); // Assuming your cart response has an 'items' array
            console.log(data.cart.items);
          } else {
            console.error('Error fetching cart data');
          }
        } catch (error) {
          console.error('Error:', error);
        }
      }
    };

    if (isCheckoutFormFilled) {
      fetchCartProducts();
    }
  }, [isCheckoutFormFilled, userId]);

  const handlePayment = async () => {
    if (isCheckoutFormFilled && cartProducts) { // Check if cartProducts is available
      try {
        const response = await fetch('/api/payment/create-checkout-session', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ userId, cartProducts }), // Only sending userId to the backend
        });

        const { id } = await response.json();

        const stripe = window.Stripe('pk_test_FobLVO7JYtSIN9pQD6KNloZK');
        await stripe.redirectToCheckout({ sessionId: id });
      } catch (error) {
        console.error('Error:', error);
      }
    } else {
      navigate('/checkout');
    }
  };

  useEffect(() => {
    if (!isCheckoutFormFilled) {
      navigate('/checkout');
    }
  }, [isCheckoutFormFilled, navigate]);

  return (
    <div>
      {isCheckoutFormFilled && (
        <div>
          <section className="bg-white py-8 antialiased dark:bg-gray-900 md:py-16">
            <div className="mx-auto max-w-screen-xl px-4 2xl:px-0">
              <div className="mx-auto max-w-5xl">
                <h2 className="text-xl font-semibold text-gray-900 dark:text-white sm:text-2xl">
                  Payment
                </h2>
                {/* Other details */}
                <Button
                  type="button"
                  onClick={handlePayment}
                  gradientDuoTone="purpleToPink"
                >
                  Pay now
                </Button>
              </div>
            </div>
          </section>
        </div>
      )}
    </div>
  );
}


cartSlice.js

// redux/cartSlice.js
import { createSlice } from '@reduxjs/toolkit';

const cartSlice = createSlice({
  name: 'cart',
  initialState: {
    items: [],
    loading: false,
    error: null,
  },
  reducers: {
    setLoading(state, action) {
      state.loading = action.payload;
    },
    setCartItems(state, action) {
      state.items = action.payload;
    },
    addItem(state, action) {
      const item = action.payload;
      const existingItemIndex = state.items.findIndex((i) => i.id === item.id);
      if (existingItemIndex >= 0) {
        state.items[existingItemIndex].quantity += item.quantity;
      } else {
        state.items.push(item);
      }
    },
    updateItemQuantity(state, action) {
      const { id, quantity } = action.payload;
      const existingItemIndex = state.items.findIndex((item) => item.id === id);
      if (existingItemIndex >= 0) {
        state.items[existingItemIndex].quantity = quantity;
      }
    },
    removeItem(state, action) {
      const id = action.payload;
      state.items = state.items.filter((item) => item.id !== id);
    },
    clearCart: (state) => {
			state.items = [];
		},
    setError(state, action) {
      state.error = action.payload;
    },
  },
});

export const {
  setLoading,
  setCartItems,
  addItem,
  updateItemQuantity,
  removeItem,
  setError,
  clearCart
} = cartSlice.actions;

export const selectCartItems = (state) => state.cart.items;

export const selectTotalQuantity = (state) => {
  return state.cart.items.reduce((total, item) => total + (item.quantity || 0), 0);
};

export default cartSlice.reducer;


